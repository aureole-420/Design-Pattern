package model;

import javax.swing.Timer;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import util.Dispatcher;
import util.Randomizer;

import java.awt.Graphics;

// import model.ball.ABall;
import ball.Ball;
import strategy.IStrategyFac;
import strategy.IUpdateStrategy;
import strategy.MultiStrategy;
// import strategy.StraightStrategy;

import java.awt.Rectangle;
import java.awt.Point;
import java.awt.Color;
import java.awt.Component;

import strategy.SwitcherStrategy;

/**
 * This is the model for BallWorldApp
 * @author Yuhui Tong, Anqi Yu
 * @version 1.0
 */
public class BallModel {
	/**
	 * Adapter that enables the model to talk to the view
	 * i.e, enable the model to call view's methods.
	 */
	private IModel2ViewAdapter _model2ViewAdpt = IModel2ViewAdapter.NULL_OBJECT; //insure that the adapter is always valid.

	/**
	 * Constructor of BallModel 
	 * @param model2ViewAdpt adapter that enables the model to talk to the view.
	 * i.e., enable the model to call view's methods.
	 */
	public BallModel(IModel2ViewAdapter model2ViewAdpt) {
		_model2ViewAdpt = model2ViewAdpt;
	}

	/**
	 * Model update every 50 milliseconds.
	 */
	private int _timeSlice = 50; // 

	/**
	 * A timer is used to regularly update the View.
	 */
	private Timer _timer = new javax.swing.Timer(_timeSlice, new ActionListener() {

		/**
		 * The timer "ticks" by calling this method every _timeslice milliseconds. 
		 */
		public void actionPerformed(ActionEvent e) {
			_model2ViewAdpt.repaint();
		}
	});

	/**
	 * Start the timer.
	 */
	public void start() {
		_timer.start();
	}

	/**
	 * The dispatcher for adding and removing balls.
	 */
	private Dispatcher _dispatcher = new Dispatcher();

	/**
	 * This  method is called by the view's adapter to the model, i.e. is called by IView2ModelAdapter.paint().
	 * This method will update the sprites's painted locations by painting all the sprites onto the given Graphics object.
	 * @param g The graphics object from the view's paintComponent() call.
	 */
	public void update(Graphics g) {
		// every observer is notified, i.e., ABall.update() method is prcoessed.
		_dispatcher.notifyAll(g); // The graphics object is given to all the balls (Observers)
	}



	/**
	 * Instantiate an ABall object of classname type, and
	 * add it to the dispatcher
	 * @param classname Name of a concrete subclass of ABall, e.g., "model.ball.DrunkenBall".
	 */


	/**
	* The following method returns an instance of an ABall, given a fully qualified class name (package.classname) of
	* a subclass of ABall.
	* The method assumes that there is only one constructor for the supplied class that has the same *number* of
	* input parameters as specified in the args array and that it conforms to a specific
	* signature, i.e. specific order and types of input parameters in the args array.
	* @param className A string that is the fully qualified class name of the desired object
	* @return An instance of the supplied class. 
	*/
	private IUpdateStrategy loadStrategy(String className) {
		System.out.println("single attempts");
		try {
			System.out.println("multiple attempts");
			Object[] args = new Object[] {};
			java.lang.reflect.Constructor<?> cs[] = Class.forName(className).getConstructors();
			java.lang.reflect.Constructor<?> c = null;
			for (int i = 0; i < cs.length; i++) {
				if (args.length == (cs[i]).getParameterTypes().length) {
					c = cs[i];
					break;
				}
			}
			return (IUpdateStrategy) c.newInstance(args);
		}
		catch(Exception ex) {
			System.err.println("Class "+className+" failed to load. \nException= \n" + ex);
			ex.printStackTrace();
			return null;
		}
	}
	
	
	public void makeBall(IUpdateStrategy strategy) {
		int initialRadius = Randomizer.Singleton.randomInt(5, 15);
		int height = _model2ViewAdpt.getCanvas().getHeight();
		int width = _model2ViewAdpt.getCanvas().getWidth();
		Point initialLocation = Randomizer.Singleton.randomLoc(new Rectangle(0, 0, width, height));
		Point initialVelocity = Randomizer.Singleton.randomVel(new Rectangle(0, 0, 5, 15));
		Color initialColor = Randomizer.Singleton.randomColor();
		Component theCanvas = _model2ViewAdpt.getCanvas();

		Ball ball = new Ball(initialLocation, initialRadius, initialVelocity, initialColor, theCanvas, strategy);
		_dispatcher.addObserver(ball);
	}
	

	/**
	 * Remove all the balls/observers.
	 */
	public void clearBalls() {
		_dispatcher.deleteObservers();
	}
	
	/**
	 * A factory for a beeping error startegy that beeps the speaker every 25 updates
	 * Either use the _errorStrategyFac variable directly if you need a factory that makes an error strategy
	 * or call _errorStrategyFac.make() to create an instance of a beeping error strategy.
	 */
	private IStrategyFac _errorStrategyFac = new IStrategyFac() {
		@Override
		/**
		 * Make the beeping error strategy
		 * @return An instance of a beeping error strategy
		 */
		public IUpdateStrategy make() {
			return new IUpdateStrategy() {
				private int count = 0; // update counter
				/**
				 * Beep the speaker every 25 updates
				 */
				public void updateState(Ball context) {
					if (25 < count++) {
						java.awt.Toolkit.getDefaultToolkit().beep();
						count = 0;
					}
				}
			};
		}
	};
	
	/**
	 * Returns an IStrategyFac that can instantiate the strategy specified by classname. Returns
	 * a factory for beeping error strategy if classname is null.
	 * @param classname Shortened name of desired strategy.
	 * @return A factory to make that strategy.
	 */
	public IStrategyFac makeStrategyFac(final String classname) {
		if (classname == null) return _errorStrategyFac;
		return new IStrategyFac() {
			public IUpdateStrategy make() {
				return loadStrategy(fixName(classname));
			}			
			
			public String toString(){
				return classname;
			}
		};
	}
	
	/**
	 * REturns an IStrategyFac that can instantiate a MultiStrategy with the two
	 * strategies made by the two given IStrategyFac objects. Returns null if
	 * either supplied factory is null. 
	 * The toString() of the returned factory is the toString()'s of the given strategy factories 
	 * concatenated with a"_". If either factory is null, then a factory for a beeping error strategy is returned.
	 * 
	 * @param stratFac1 An IStrategyFac for a strategy
	 * @param stratFac2 An IStrategyFac for a strategy
	 * @return An IStrategyFac for the composition of the two strategies.
	 */
	public IStrategyFac combineStrategyFacs(final IStrategyFac stratFac1, final IStrategyFac stratFac2) {
		if (stratFac1 == null || stratFac2 == null)
			return _errorStrategyFac;
		return new IStrategyFac() {
			/**
			 * Instantiate a new MultiStrategy with the strategies from the given strategy factories.
			 * @return A multiStrategy instance
			 */
			public IUpdateStrategy make() {
				return new MultiStrategy(stratFac1.make(), stratFac2.make());
			}
			
			/**
			 * Return a string that is the toString()'s of the given strategy factories 
			 * concatenated with a"_"
			 */
			public String toString( ) {
				return stratFac1.toString() + "_" + stratFac2.toString();
			}
		};
	}
	
	private SwitcherStrategy _switcher = new SwitcherStrategy();
	
	public SwitcherStrategy getSwitcherStrategy() {
		return _switcher;
	}
	public void switchSwitcherStrategy (IUpdateStrategy strat) {
		_switcher.setStrategy(strat);
	}
	
	private String fixName(String className) {
		String shortname = className.trim();
		return "strategy."+shortname+"Strategy";
	}
	
	
}
