package model.paint;

import java.awt.Graphics;
import java.awt.geom.AffineTransform;

import model.ball.Ball;

/**
 * Abstract class that provides defaut behavior for subclasses that will decorate another 
 * IPaintStrategy to add functionality to that strategy. All this class's methods do is to simply
 * delegate to the decoree. A subclass should override one or more methods, adding additional processing either before or after
 * delegating to the decoree. Note that this class cannot be used by the BallWorld System directly as it
 * lacks a no-parameter constructor. 
 * @author yuhui
 *
 */
public class ADecoratorPaintStrategy extends APaintStrategy {
	private APaintStrategy decoree;
	
	public ADecoratorPaintStrategy(APaintStrategy decoree) {
		super(new AffineTransform());
		this.decoree = decoree;
	}
	
	public void init(Ball ball) {
		decoree.init(ball);
	}
	
	public void paint(Graphics g, Ball host) {
		decoree.paint(g, host);
	}
	
	
	@Override
	public void paintXfrm(Graphics g, Ball host, AffineTransform at) {
		// TODO Auto-generated method stub
		decoree.paintXfrm(g, host, at);
		
	} 
	
	
}
