package client.model.task;

import java.rmi.RemoteException;
import java.util.LinkedList;

import provided.compute.ILocalTaskViewAdapter;
import provided.compute.ITask;
import provided.compute.ITaskResultFormatter;

public class MultiTasks implements ITask<LinkedList<Object>>{
	
	/**
	 * generated serialID
	 */
	private static final long serialVersionUID = -8175794870855031491L;
	
	private ITask<? extends Object> _task1;
	private ITask<? extends Object> _task2;
	private LinkedList<Object> _result = new LinkedList<Object>();
	
	private transient ILocalTaskViewAdapter taskView = ILocalTaskViewAdapter.DEFAULT_ADAPTER;

	
	public MultiTasks(ITask<? extends Object> task1, ITask<? extends Object> task2) {
		this._task1 = task1;
		this._task2 = task2;
	}
	
	@Override
	public LinkedList<Object> execute() throws RemoteException {
		try {
			taskView.append("Executing multiTasks!");
			_result.add(_task1.execute());
			_result.add(_task2.execute());
			return _result;
		} catch (Exception e) {
			taskView.append("Exception in executing multi-tasks: " + e);
			return _result;
		}
	}

	@Override
	public void setTaskViewAdapter(ILocalTaskViewAdapter viewAdapter) {
		_task1.setTaskViewAdapter(viewAdapter);
		_task2.setTaskViewAdapter(viewAdapter);
		taskView = viewAdapter;
	}

	@Override
	public ITaskResultFormatter<LinkedList<Object>> getFormatter() {
		// TODO Auto-generated method stub
		return new ITaskResultFormatter<LinkedList<Object>>() {

			@Override
			public String format(LinkedList<Object> result) {
				ITaskResultFormatter<Object> formatter1 = (ITaskResultFormatter<Object>) _task1.getFormatter();
				ITaskResultFormatter<Object> formatter2 = (ITaskResultFormatter<Object>) _task2.getFormatter();
				return "\n---MultiTask 1---" + formatter1.format(result.get(0)) +"\n---MultiTask 2---"+ formatter2.format(result.get(1));
			}			
		};
	}
	
	@Override
	public String toString() {
		return _task1.toString() +"-"+ _task2.toString();
	}
	


}
