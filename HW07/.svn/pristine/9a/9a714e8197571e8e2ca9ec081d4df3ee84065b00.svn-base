package client.model;

import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.LinkedList;
import java.util.function.Consumer;

import client.model.task.MultiTasks;
import provided.client.model.IClientModel;
import provided.client.model.taskUtils.ITaskFactory;
import provided.client.model.taskUtils.SingletonTaskFactoryLoader;
import provided.compute.ICompute;
import provided.compute.IRemoteTaskViewAdapter;
import provided.compute.ITask;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;

/**
 * The model for client
 * @author yuhui
 */
public class ClientModel implements IClientModel {
	
	/**
	 * Adapter to allow client to call view's method.
	 */
	private IViewAdapter _clientView;
	
	/**
	 * The output command for RMIUtils setting.
	 */
	private Consumer<String> outputCmd = new Consumer<String>() {
		@Override
		public void accept(String t) {
			_clientView.append(t);
		}
	}; 	
	
	/**
	 * RMIUtils object for RMI system.
	 */
	private RMIUtils _rmiUtils = new RMIUtils(outputCmd);
	
	/**
	 * Stub for the compute engine, to be used by the client.
	 */
	private ICompute _computeEngineStub;
	
	/**
	 * The task view adapter for the client.
	 */
	private IRemoteTaskViewAdapter _clientTVA;
	
	/**
	 * The stub for the server's task view adapter.
	 */
	private IRemoteTaskViewAdapter _serverTVAStub;
	
	/**
	 * The stub for the client's task view adapter.
	 */
	private IRemoteTaskViewAdapter _clientTVAStub;
	
	/**
	 * The remote host's Registry, used to retrieve stub for ICompute object. 
	 */
	private Registry _registry;
	
	/**
	 * Default server's IPadress, retrieved from RMIUtils.
	 */
	private String _defaultRemoteHost;
	
	/**
	 * Constructor of client model;
	 * @param _clientView The model to view adapter
	 */
	public ClientModel(IViewAdapter _clientView) {
		this._clientView = _clientView;
	}
	
	/**
	 * Starts the client model by initializing the RMI system and creating a remote view adapter stub for use by an engine server. Procedure:
	 */
	public void start() {
		// 1. (DO THIS FIRST!) Use the IRMIUtils to start the RMI system, 
		// using port = IRMI_Defs.CLASS_SERVER_PORT_CLIENT. 
		// This will also automatically start the the security manager 
		// and the class file server for remote dynamic class loading.
		try {
			_rmiUtils.startRMI(IRMI_Defs.CLASS_SERVER_PORT_CLIENT);
			this._defaultRemoteHost = _rmiUtils.getLocalAddress();
			// System.out.println("test0-----------_!" + _defaultRemoteHost);
		} catch (Exception e) {
			System.err.println("[ClientMode.start()]: Exception starting ClientModel: " + e);	
		}
		
		// 2. Export a STUB from the client's IRemoteTaskViewAdapter RMI server object. 
		// Save this stub for use when connecting to an engine server.
		_clientTVA = new IRemoteTaskViewAdapter() {
			@Override
			public void append(String s) throws RemoteException {
				_clientView.append("[Server]: " + s);		
			}
		};

		try {
			this._clientTVAStub = (IRemoteTaskViewAdapter) UnicastRemoteObject.exportObject(_clientTVA, IRemoteTaskViewAdapter.BOUND_PORT_CLIENT);
		} catch (RemoteException e) {
			System.err.println("[ClientMode.start()]: RemoteException " + e);
			e.printStackTrace();
			System.exit(-1);
		}
	}
	
	/**
	 * Stops the client model by using the IRMIUtils to stop the RMI system. This automatically stops class file server. 
	 * This MUST be called before exiting the system!
	 */
	@Override
	public void stop() {
		try {
			System.out.println("ClientMode.stop(): client is quitting.");
			_rmiUtils.stopRMI();
		} catch (Exception e) {
			System.err.println("[ClientMode.stop()] Error stopping class server:" + e);
		}
		System.exit(0);	
	}
	
	
	/**
	 * Connects to the given remote host's Registry and retrieves the stub to the 
	 * ICompute object bound to the ICompute.BOUND_NAME name in the remote Registry 
	 * on port IRMI_Defs.REGISTRY_PORT. Procedure:
	 */
	@Override
	public String connectTo(String remoteHost) {
		
		try {
			//1. Use the IRMIUtils to retrieve the remote Registry at the given IP address. 
			_registry = _rmiUtils.getRemoteRegistry(remoteHost);
			//2. Use the remote Registry to retrieve an ICompute STUB bound to the name defined 
			//by IComputer.BOUND_NAME Save the reference to the IComputer stub somewhere.
			_computeEngineStub = (ICompute) _registry.lookup(ICompute.BOUND_NAME);
			//3. Use the ICompute stub to give the client's IRemoteTaskViewAdapter STUB to the 
			//remote engine server and retrieve the compute engine's IRemoteTaskViewAdapter stub. 
			// Save the retrieved stub for later use. Use the retrieved stub to send a connection status 
			// message to the remote compute engine's user interface.
			_serverTVAStub = _computeEngineStub.setTextAdapter(_clientTVAStub);
			
			_serverTVAStub.append("Hello from the client!");
			//_serverTVAStub.append("------test: n = " + n + "------");
			//n++;
			
		} catch (Exception e) {
			_clientView.append("[ClientModel.connectTo()] Exception connecting to " + remoteHost + ":" +  e + "\n");
			System.err.println("[ClientModel.connectTo()] Exception connecting to " + remoteHost + ":" +  e + "\n");
			e.printStackTrace();
			return "No connection established!";
		} 
		
		//4. Return a string indicating the success or failure of the connection attempt.
		return "[Connection Status] Connection to " + remoteHost + " established!";
	}
	
	/**
	 * Sends a string message to the connected compute engine using the IRemoteTaskViewAdapter STUB received from the engine server. 
	 * This message should also be echoed to the local user interface.
	 */
	@Override
	public void sendMsgToComputeEngine(String msg) {
		try {
			_serverTVAStub.append(msg);
			_clientView.append("[ClientModel.sendMsgToComputeEngine()] Sending msg to connected remote server. (msg = \"" + msg + "\")");
		} catch (RemoteException e) {
			System.err.println("[ClientModel.sendMsgToComputeEngine()] RemoteExcetion "+ e);
			e.printStackTrace();
		}	
	}
	
	/**
	 * Runs the given ITask on the remote engine server, returning the String formatted result, 
	 * which is produced using the given ITask's ITaskResultFormatter object.
	 */
	@Override
	public <T> String runTask(ITask<T> task) {
		try {
			T result = _computeEngineStub.executeTask(task);
			_clientView.append("[Task execution returned result] " + task.getFormatter().format(result));
		} catch (Exception e) {
			System.err.println("[ClientModel.runTask] Exception runing task " + task + ":" + e + "\n");
			e.printStackTrace();
		}
		return null;
	}
	
	/**
	 * Load task with task factory and param.
	 * @param taskFactory The task factory used to make a task.
	 * @param param The parameter used initialize a task.
	 * @return The task object.
	 */
	public <T> ITask<T> loadTask(ITaskFactory<?> taskFactory, String param) {
		return (ITask<T>) taskFactory.make(param);
		
	}
	
	/**
	 * Make a task factory for a task.
	 * @param classname The class name of desired task.
	 * @return The task factory for the desired task.
	 */
	public ITaskFactory<?> makeTaskFactory(String classname) {
		return SingletonTaskFactoryLoader.SINGLETON.load(classname);
	}
	
	/**
	 * This method combines two task factory into one.
	 * @param tf1 task factory 1
	 * @param tf2 task factory 2
	 * @param param Parameters used to initialize the task.
	 * @return
	 */
	public ITaskFactory<? extends Object> combineTaskFactory(ITaskFactory<?> tf1, ITaskFactory<?> tf2, String param) {
		ITaskFactory<LinkedList<Object>> mtf =  new ITaskFactory<LinkedList<Object>> () {

			@Override
			public ITask<LinkedList<Object>> make(String param) {
				return new MultiTasks(tf1.make(param), tf2.make(param));
			}
			
			@Override
			public String toString() {
				return tf1.toString()+"-"+tf2.toString();
			}
		};
		return (ITaskFactory<? extends Object>) mtf;
	}
	
	/**
	 * Getter for default remote host
	 * @return The IP adress of the remote host
	 */
	public String getDefaultRemoteHost() {
		return _defaultRemoteHost;
	}

}
